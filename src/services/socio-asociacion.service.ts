import {
  collection,
  doc,
  getDoc,
  query,
  where,
  getDocs,
  writeBatch,
  serverTimestamp,
  Timestamp,
  updateDoc,
} from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { COLLECTIONS } from '@/lib/constants';
import { handleError } from '@/lib/error-handler';
import { Socio } from '@/types/socio';

class SocioAsociacionService {
  private readonly sociosCollection = COLLECTIONS.SOCIOS;
  private readonly asociacionesCollection = COLLECTIONS.ASOCIACIONES;
  private readonly usersCollection = COLLECTIONS.USERS;

  /**
   * Vincula un socio a una asociaci√≥n (actualiza ambas partes y la tabla users)
   */
  async vincularSocioAsociacion(socioId: string, asociacionId: string): Promise<boolean> {
    try {
      console.log(`üîÑ Vinculando socio ${socioId} con asociaci√≥n ${asociacionId}`);
      
      // 1. Verificar que el socio existe en la colecci√≥n socios
      const socioRef = doc(db, this.sociosCollection, socioId);
      const socioDoc = await getDoc(socioRef);
      
      if (!socioDoc.exists()) {
        throw new Error('El socio no existe en la colecci√≥n socios');
      }
      
      // 2. Verificar que la asociaci√≥n existe
      const asociacionRef = doc(db, this.asociacionesCollection, asociacionId);
      const asociacionDoc = await getDoc(asociacionRef);
      
      if (!asociacionDoc.exists()) {
        throw new Error('La asociaci√≥n no existe');
      }
      
      // 3. Buscar el usuario correspondiente en la colecci√≥n users
      const socioData = socioDoc.data();
      let userDoc = null;
      let userRef = null;
      
      // Buscar por email en la colecci√≥n users
      if (socioData.email) {
        const userQuery = query(
          collection(db, this.usersCollection),
          where('email', '==', socioData.email.toLowerCase())
        );
        const userSnapshot = await getDocs(userQuery);
        
        if (!userSnapshot.empty) {
          userDoc = userSnapshot.docs[0];
          userRef = userDoc.ref;
          console.log('üë§ Usuario encontrado en colecci√≥n users:', userDoc.id);
        }
      }
      
      // Tambi√©n intentar buscar por UID si no se encontr√≥ por email
      if (!userDoc) {
        try {
          userRef = doc(db, this.usersCollection, socioId);
          userDoc = await getDoc(userRef);
          if (userDoc.exists()) {
            console.log('üë§ Usuario encontrado por UID en colecci√≥n users:', socioId);
          } else {
            userDoc = null;
            userRef = null;
          }
        } catch {
          console.log('‚ö†Ô∏è No se encontr√≥ usuario por UID, continuando solo con socio');
        }
      }
      
      // Obtener datos actuales
      const asociacionData = asociacionDoc.data();
      
      // Verificar si ya est√° vinculado
      if (socioData.asociacionId === asociacionId) {
        console.log('‚ö†Ô∏è El socio ya est√° vinculado a esta asociaci√≥n');
        return true; // Ya est√° vinculado, consideramos √©xito
      }
      
      // Usar batch para actualizar todos los documentos de forma at√≥mica
      const batch = writeBatch(db);
      
      // 4. Actualizar socio con la asociaci√≥n
      batch.update(socioRef, {
        asociacionId: asociacionId,
        asociacion: asociacionData.nombre || 'Asociaci√≥n',
        fechaVinculacion: serverTimestamp(),
        vinculadoPor: asociacionId,
        actualizadoEn: serverTimestamp(),
      });
      
      // 5. Actualizar usuario en la colecci√≥n users (si existe)
      if (userRef && userDoc) {
        console.log('üîÑ Actualizando usuario en colecci√≥n users');
        batch.update(userRef, {
          asociacionId: asociacionId,
          actualizadoEn: serverTimestamp(),
        });
      }
      
      // 6. Actualizar asociaci√≥n con el socio (si mantiene lista de socios)
      if (Array.isArray(asociacionData.socios)) {
        if (!asociacionData.socios.includes(socioId)) {
          batch.update(asociacionRef, {
            socios: [...asociacionData.socios, socioId],
            actualizadoEn: serverTimestamp(),
          });
        }
      } else {
        // Si no existe el campo socios, lo creamos
        batch.update(asociacionRef, {
          socios: [socioId],
          actualizadoEn: serverTimestamp(),
        });
      }
      
      // Ejecutar las actualizaciones
      await batch.commit();
      
      console.log('‚úÖ Socio vinculado exitosamente a la asociaci√≥n');
      console.log(`üìä Documentos actualizados: socio (${socioId}), asociaci√≥n (${asociacionId})${userRef ? ', usuario' : ''}`);
      
      return true;
    } catch (error) {
      console.error('‚ùå Error vinculando socio:', error);
      handleError(error, 'Vincular Socio Asociaci√≥n');
      return false;
    }
  }

  /**
   * Desvincular un socio de una asociaci√≥n
   */
  async desvincularSocioAsociacion(socioId: string, asociacionId: string): Promise<boolean> {
    try {
      console.log(`üîÑ Desvinculando socio ${socioId} de asociaci√≥n ${asociacionId}`);
      
      // 1. Verificar que el socio existe
      const socioRef = doc(db, this.sociosCollection, socioId);
      const socioDoc = await getDoc(socioRef);
      
      if (!socioDoc.exists()) {
        throw new Error('El socio no existe');
      }
      
      // 2. Verificar que la asociaci√≥n existe
      const asociacionRef = doc(db, this.asociacionesCollection, asociacionId);
      const asociacionDoc = await getDoc(asociacionRef);
      
      if (!asociacionDoc.exists()) {
        throw new Error('La asociaci√≥n no existe');
      }
      
      // 3. Buscar el usuario correspondiente en la colecci√≥n users
      const socioData = socioDoc.data();
      let userDoc = null;
      let userRef = null;
      
      // Buscar por email en la colecci√≥n users
      if (socioData.email) {
        const userQuery = query(
          collection(db, this.usersCollection),
          where('email', '==', socioData.email.toLowerCase())
        );
        const userSnapshot = await getDocs(userQuery);
        
        if (!userSnapshot.empty) {
          userDoc = userSnapshot.docs[0];
          userRef = userDoc.ref;
        }
      }
      
      // Tambi√©n intentar buscar por UID si no se encontr√≥ por email
      if (!userDoc) {
        try {
          userRef = doc(db, this.usersCollection, socioId);
          userDoc = await getDoc(userRef);
          if (!userDoc.exists()) {
            userDoc = null;
            userRef = null;
          }
        } catch {
          console.log('‚ö†Ô∏è No se encontr√≥ usuario por UID');
        }
      }
      
      // Obtener datos actuales
      const asociacionData = asociacionDoc.data();
      
      // Verificar si est√° vinculado a esta asociaci√≥n
      if (socioData.asociacionId !== asociacionId) {
        console.log('‚ö†Ô∏è El socio no est√° vinculado a esta asociaci√≥n');
        return true; // Ya no est√° vinculado, consideramos √©xito
      }
      
      // Usar batch para actualizar todos los documentos de forma at√≥mica
      const batch = writeBatch(db);
      
      // 4. Actualizar socio para quitar la asociaci√≥n
      batch.update(socioRef, {
        asociacionId: null, // Eliminar la asociaci√≥n
        asociacion: null,
        fechaVinculacion: null,
        vinculadoPor: null,
        actualizadoEn: serverTimestamp(),
      });
      
      // 5. Actualizar usuario en la colecci√≥n users (si existe)
      if (userRef && userDoc) {
        console.log('üîÑ Actualizando usuario en colecci√≥n users para desvinculaci√≥n');
        batch.update(userRef, {
          asociacionId: null,
          actualizadoEn: serverTimestamp(),
        });
      }
      
      // 6. Actualizar asociaci√≥n para quitar el socio
      if (Array.isArray(asociacionData.socios) && asociacionData.socios.includes(socioId)) {
        batch.update(asociacionRef, {
          socios: asociacionData.socios.filter(id => id !== socioId),
          actualizadoEn: serverTimestamp(),
        });
      }
      
      // Ejecutar las actualizaciones
      await batch.commit();
      
      console.log('‚úÖ Socio desvinculado exitosamente de la asociaci√≥n');
      return true;
    } catch (error) {
      console.error('‚ùå Error desvinculando socio:', error);
      handleError(error, 'Desvincular Socio Asociaci√≥n');
      return false;
    }
  }

  /**
   * Obtener socios de una asociaci√≥n
   */
  async getSociosByAsociacion(asociacionId: string): Promise<Socio[]> {
    try {
      console.log('üîç Obteniendo socios de la asociaci√≥n:', asociacionId);
      
      const q = query(
        collection(db, this.sociosCollection),
        where('asociacionId', '==', asociacionId)
      );
      
      const snapshot = await getDocs(q);
      
      const socios = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
          id: doc.id,
          uid: doc.id,
          ...data,
          fechaNacimiento: data.fechaNacimiento?.toDate() ? Timestamp.fromDate(data.fechaNacimiento.toDate()) : undefined,
          fechaIngreso: data.fechaIngreso?.toDate() ? Timestamp.fromDate(data.fechaIngreso.toDate()) : Timestamp.now(),
          fechaVencimiento: data.fechaVencimiento?.toDate() ? Timestamp.fromDate(data.fechaVencimiento.toDate()) : undefined,
          ultimoPago: data.ultimoPago?.toDate() ? Timestamp.fromDate(data.ultimoPago.toDate()) : undefined,
          ultimoAcceso: data.ultimoAcceso?.toDate() ? Timestamp.fromDate(data.ultimoAcceso.toDate()) : undefined,
          creadoEn: data.creadoEn?.toDate() ? Timestamp.fromDate(data.creadoEn.toDate()) : Timestamp.now(),
          actualizadoEn: data.actualizadoEn?.toDate() ? Timestamp.fromDate(data.actualizadoEn.toDate()) : Timestamp.now(),
          asociacion: data.asociacion || 'Asociaci√≥n',
        } as Socio;
      });
      
      console.log(`‚úÖ Se encontraron ${socios.length} socios en la asociaci√≥n`);
      return socios;
    } catch (error) {
      console.error('‚ùå Error obteniendo socios de la asociaci√≥n:', error);
      handleError(error, 'Get Socios By Asociacion');
      return [];
    }
  }

  /**
   * Obtener asociaciones de un socio
   */
  async getAsociacionesBySocio(socioId: string): Promise<string[]> {
    try {
      console.log('üîç Obteniendo asociaciones del socio:', socioId);
      
      const socioRef = doc(db, this.sociosCollection, socioId);
      const socioDoc = await getDoc(socioRef);
      
      if (!socioDoc.exists()) {
        console.log('‚ö†Ô∏è Socio no encontrado en colecci√≥n socios');
        return [];
      }
      
      const socioData = socioDoc.data();
      
      // Si el socio tiene una asociaci√≥n asignada, la devolvemos
      if (socioData.asociacionId) {
        console.log('‚úÖ Socio tiene asociaci√≥n:', socioData.asociacionId);
        return [socioData.asociacionId];
      }
      
      console.log('‚ö†Ô∏è Socio no tiene asociaci√≥n asignada');
      return [];
    } catch (error) {
      console.error('‚ùå Error obteniendo asociaciones del socio:', error);
      handleError(error, 'Get Asociaciones By Socio');
      return [];
    }
  }

  /**
   * Verificar si un socio est√° vinculado a una asociaci√≥n
   */
  async isSocioVinculado(socioId: string, asociacionId: string): Promise<boolean> {
    try {
      const socioRef = doc(db, this.sociosCollection, socioId);
      const socioDoc = await getDoc(socioRef);
      
      if (!socioDoc.exists()) {
        return false;
      }
      
      const socioData = socioDoc.data();
      
      return socioData.asociacionId === asociacionId;
    } catch (error) {
      handleError(error, 'Is Socio Vinculado');
      return false;
    }
  }

  /**
   * Sincronizar asociaci√≥n entre colecciones users y socios
   */
  async sincronizarAsociacionUsuario(userId: string): Promise<boolean> {
    try {
      console.log('üîÑ Sincronizando asociaci√≥n para usuario:', userId);
      
      // 1. Buscar en colecci√≥n users
      const userRef = doc(db, this.usersCollection, userId);
      const userDoc = await getDoc(userRef);
      
      if (!userDoc.exists()) {
        console.log('‚ö†Ô∏è Usuario no encontrado en colecci√≥n users');
        return false;
      }
      
      const userData = userDoc.data();
      
      // 2. Buscar en colecci√≥n socios por email o UID
      let socioDoc = null;
      let socioRef = null;
      
      // Buscar por email
      if (userData.email) {
        const socioQuery = query(
          collection(db, this.sociosCollection),
          where('email', '==', userData.email.toLowerCase())
        );
        const socioSnapshot = await getDocs(socioQuery);
        
        if (!socioSnapshot.empty) {
          socioDoc = socioSnapshot.docs[0];
          socioRef = socioDoc.ref;
        }
      }
      
      // Si no se encontr√≥ por email, buscar por UID
      if (!socioDoc) {
        socioRef = doc(db, this.sociosCollection, userId);
        socioDoc = await getDoc(socioRef);
        if (!socioDoc.exists()) {
          console.log('‚ö†Ô∏è Socio no encontrado en colecci√≥n socios');
          return false;
        }
      }
      
      const socioData = socioDoc.data();
      
      // 3. Sincronizar asociacionId
      if (socioData.asociacionId && socioData.asociacionId !== userData.asociacionId) {
        console.log('üîÑ Actualizando asociacionId en usuario');
        await updateDoc(userRef, {
          asociacionId: socioData.asociacionId,
          actualizadoEn: serverTimestamp(),
        });
        console.log('‚úÖ Asociaci√≥n sincronizada en usuario');
        return true;
      } else if (userData.asociacionId && userData.asociacionId !== socioData.asociacionId) {
        console.log('üîÑ Actualizando asociacionId en socio');
        if (socioRef) {
          await updateDoc(socioRef, {
            asociacionId: userData.asociacionId,
            actualizadoEn: serverTimestamp(),
          });
        } else {
          console.error('‚ùå socioRef is null, cannot update socio document');
          return false;
        }
        console.log('‚úÖ Asociaci√≥n sincronizada en socio');
        return true;
      }
      
      console.log('‚úÖ Asociaciones ya est√°n sincronizadas');
      return true;
    } catch (error) {
      console.error('‚ùå Error sincronizando asociaci√≥n:', error);
      handleError(error, 'Sincronizar Asociaci√≥n Usuario');
      return false;
    }
  }

  /**
   * Debug: Verificar estado de vinculaci√≥n de un socio
   */
  async debugSocioVinculacion(socioId: string): Promise<void> {
    try {
      console.log('üêõ DEBUG: Verificando vinculaci√≥n del socio:', socioId);
      
      // Verificar en colecci√≥n socios
      const socioRef = doc(db, this.sociosCollection, socioId);
      const socioDoc = await getDoc(socioRef);
      
      if (socioDoc.exists()) {
        const socioData = socioDoc.data();
        console.log('üìÑ Datos del socio:', {
          id: socioDoc.id,
          email: socioData.email,
          asociacionId: socioData.asociacionId,
          asociacion: socioData.asociacion,
          fechaVinculacion: socioData.fechaVinculacion,
        });
      } else {
        console.log('‚ùå Socio no encontrado en colecci√≥n socios');
      }
      
      // Verificar en colecci√≥n users
      const userRef = doc(db, this.usersCollection, socioId);
      const userDoc = await getDoc(userRef);
      
      if (userDoc.exists()) {
        const userData = userDoc.data();
        console.log('üë§ Datos del usuario:', {
          id: userDoc.id,
          email: userData.email,
          asociacionId: userData.asociacionId,
          role: userData.role,
        });
      } else {
        console.log('‚ùå Usuario no encontrado en colecci√≥n users');
      }
      
      // Si existe el socio, buscar tambi√©n por email en users
      if (socioDoc.exists()) {
        const socioData = socioDoc.data();
        if (socioData.email) {
          const userQuery = query(
            collection(db, this.usersCollection),
            where('email', '==', socioData.email.toLowerCase())
          );
          const userSnapshot = await getDocs(userQuery);
          
          if (!userSnapshot.empty) {
            const userByEmail = userSnapshot.docs[0];
            const userByEmailData = userByEmail.data();
            console.log('üìß Usuario encontrado por email:', {
              id: userByEmail.id,
              email: userByEmailData.email,
              asociacionId: userByEmailData.asociacionId,
              role: userByEmailData.role,
            });
          }
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error en debug:', error);
    }
  }
}

// Exportar instancia singleton
export const socioAsociacionService = new SocioAsociacionService();
export default socioAsociacionService;